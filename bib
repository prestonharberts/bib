#!/bin/bash
# shellcheck disable=1111,1112,2030,2031,2034,2086

# USER CONFIG

# change if you rename your bible folder
BIBLE_FOLDER_NAME="bible"

# change if you want a different new paragraph marker
PARAGRAPH_MARKER="↓"

# uncomment to make paragraph marker a pilcrow sign
#PARAGRAPH_MARKER="¶"

# removes the brackets that show added words in some translations
REMOVE_SQUARE_BRACKETS="false"

# removes the > that mark poetry indentation
REMOVE_ANGLE_BRACKETS="false"

# enable or disable whether context is shown by default
CONTEXT_DEFAULT="true"

# allow disabled less so you don't have the use keys to quit less
LESS_DEFAULT="true"

# set pager to less if enabled by default, else cat the output
if [[ "$LESS_DEFAULT" = "true" ]]; then
  PAGER="less -RFX"
elif [[ "$LESS_DEFAULT" = "false" ]]; then
  PAGER="cat"
fi

# set global variables for script directory
DIR_OF_SCRIPT=$(dirname "$(readlink -f $0)")
BIBLE_DIR="${DIR_OF_SCRIPT}/${BIBLE_FOLDER_NAME}"

main() {
  # if no arguments, open console mode
  if [ $# -eq 0 ]; then
    start_bib_console
  # else process arguments and print to screen
  else
    get_args "$@"
    if [[ -n "$book" ]]; then
      get_scripture
    fi
  fi
  exit 0
}

start_bib_console() {
  echo "bib (interactive CLI mode)"
  echo "Type 'quit' or 'q' to exit."
  echo "Enter Bible reference (e.g., john3 16)"

  # history
  export HISTFILE=~/.bib_history
  export HISTSIZE=1000
  shopt -s histappend

  history -n

  while true; do
    # prompt the user for input
    input=$(bash -i -c '
      export HISTFILE=~/.bib_history
      export HISTSIZE=1000
      shopt -s histappend
      history -r
      read -e -r -p $'\''\001\033[1;34m\002>>> \001\033[0m\002'\'' input 
      echo $input
    ')

    # remove all newlines from input
    # this fixes an issue in Termux
    input="${input//$'\n'/}"

    set -- $input

    # exit condition
    if [[ "$input" == "q" ]] || [[ "$input" == "quit" ]] || [[ "$input" == "exit" ]]; then
      break
    fi

    # add command to history
    echo "$input" >>"${HISTFILE}"

    # begin fetching scripture and then print
    get_args "$@"

    # history
    history -n
  done
}

get_args() {
  # initialize flag variables
  reset_flags

  # pre-filter $@ args and remove unnecessary chars
  args=()
  for arg in "$@"; do
    # clear terminal screen
    if [[ "$arg" =~ ^clear|cls|l$ ]]; then
      clear
    elif [[ "$arg" =~ ^--*[-A-Za-z]+$ ]]; then
      if [[ "${arg}" == "-N" ]] || [[ "${arg}" == "--no-context-all" ]]; then
        arg_context="false"
        arg_context_all="false"
        flags_found=1
      elif [[ "${arg}" == "-C" ]] || [[ "${arg}" == "--context-all" ]]; then
        arg_context="true"
        arg_context_all="true"
        flags_found=1
      else
        args+=("${arg}")
      fi

    elif [[ "$arg" =~ ^[0-9]*[A-Za-z]+$ ]]; then
      curr_book=$arg
      args+=("${arg,,}")

    # if arg has a book name appended with a chapter number
    # or if arg has [-:,], split args with spaces
    elif [[ "$arg" =~ [A-Za-z][0-9]|[-.,:] ]]; then
      arg=$(echo "$arg" | sed 's/\./ /g')
      arg=$(echo "$arg" | sed 's/^\(.\+\)[-:]/\1 /g')
      arg=$(echo "$arg" | sed 's/^\(.\+\)[-:]/\1 /g')
      arg=$(echo "$arg" | sed 's/,/, /g')
      arg=$(echo "$arg" | sed 's/\([A-Za-z]\)\([0-9]\)/\1 \2/g')
      IFS=' ' read -r -a temp_args <<<"$arg"
      for temp_arg in "${temp_args[@]}"; do
        # if temp_arg has a comma to indicate verses in same book
        if [[ "$temp_arg" =~ , ]]; then
          # if phrase with comma includes book title
          # and replace book title
          if [[ "$temp_arg" =~ ^([1-3]*[A-Za-z]+) ]]; then
            curr_book="${BASH_REMATCH[1]}"
            temp_arg=$(echo "$temp_arg" | sed 's/,//')
            args+=("${temp_arg,,}")
            args+=("${curr_book,,}")

          # else just replace comma with book title
          else
            temp_arg=$(echo "$temp_arg" | sed 's/,//')
            args+=("${temp_arg,,}")
            args+=("${curr_book,,}")
          fi
        # elif temp_arg has the title in it, store book title in curr_book
        elif [[ "$temp_arg" =~ ^([1-3]*[A-Za-z]+) ]]; then
          curr_book="${BASH_REMATCH[1]}"
          args+=("${temp_arg,,}")
        else
          args+=("${temp_arg,,}")
        fi
      done
    else
      args+=("${arg,,}")
    fi
  done
  set -- "${args[@]}"

  # set flags and Bible chapter/section/verse
  while [[ $# -gt 0 ]]; do
    # find flags if placed before bible verse
    if [[ $flags_found -eq 0 ]]; then
      if ! get_flags "$@"; then
        reset_all_variables "$@"
        break
      fi
      if [[ $flags_found -eq 1 ]]; then
        shift 1
      fi
    fi

    # if first book arg is 1/2/3 or 1st/2nd/3rd or first/second/third
    # e.g., first ($1) john ($2)
    if [[ "$1" =~ ^[1-3]$ ]] || [[ "$1" =~ ^1st|2nd|3rd$ ]] || [[ "$1" =~ ^first|second|third$ ]] || [[ "$1" =~ ^i+$ ]]; then
      # then prepend number to next arg ($2)
      # which should be the book title
      set -- "" "$1$2" "${@:3}"
      shift 1
    fi

    if [[ "$1" =~ ^[1-3]*[a-z]+$ ]]; then
      book=$1
      shift 1
      if [[ "$1" =~ ^- ]]; then
        if [[ $flags_found -eq 0 ]]; then
          if ! get_flags "$@"; then
            reset_all_variables "$@"
            break
          fi
          if [[ $flags_found -eq 1 ]]; then
            shift 1
          fi
        fi
      fi
      if [[ "$1" =~ ^[0-9]+$ ]]; then
        chapter=$1
        shift 1
        if [[ "$1" =~ ^[0-9]+$ ]]; then
          verse_start=$1
          shift 1
          if [[ "$1" =~ ^[0-9]+$ ]]; then
            verse_end=$1
            shift 1
          fi
        fi
      fi
    fi

    validate_args_verses "$@"

    # find flags if placed after bible verse
    if [[ $flags_found -eq 0 ]]; then
      if ! get_flags "$@"; then
        reset_all_variables "$@"
        break
      fi
      if [[ $flags_found -eq 1 ]]; then
        shift 1
      fi
    fi

    if [[ -n "$book" ]]; then
      get_scripture
    else
      shift 1
    fi

    reset_text

  done

  # set flags to defaults
  reset_flags
}

get_flags() {
  if [[ "$1" =~ ^-[-A-Za-z]+$ ]]; then
    if [ "$1" = "--no-context" -o "$1" = "-n" ]; then
      arg_context="false"
      shift 1
      flags_found=1
    elif [ "$1" = "--context" -o "$1" = "-c" ]; then
      arg_context="true"
      shift 1
      flags_found=1
    elif [ "$1" = "--copy" -o "$1" = "-p" ]; then
      shift 1
      flags_found=1
    elif [ "$1" = "--random" -o "$1" = "-r" ]; then
      shift 1
      flags_found=1
    elif [ "$1" = "--abbreviations" -o "$1" = "-a" ]; then
      show_abbreviations
      return 1
    elif [ "$1" = "--help" -o "$1" = "-h" ]; then
      show_help
      return 1
    fi
  fi
}

get_scripture() {
  # trim book title and also substitute various numbers
  sed_args=(
    # substitute i, ii, and iii for 1, 2 and 3 except for isaiah
    -e 's/^iii/3/'
    -e 's/^ii/2/'
    -e 's/^i([^s\n])/1\1/'

    # substitute first, second, and third for 1, 2, and 3
    -e 's/^first/1/'
    -e 's/^second/2/'
    -e 's/^third/3/'

    # substitute 1st, 2nd, and 3rd for 1, 2, and 3
    -e 's/^1st/1/'
    -e 's/^2nd/2/'
    -e 's/^3rd/3/'
  )
  book=$(echo "$book" | sed -E "${sed_args[@]}")

  if [[ $book == "obadiah" ]] || [[ $book == "philemon" ]] || [[ $book == "2john" ]] || [[ $book == "3john" ]] || [[ $book == "jude" ]]; then
    if [[ ! -z "$chapter" ]]; then
      temp=$verse_start
      verse_start=$chapter
      verse_end=$temp
    fi
    chapter=""
  fi

  # credit to u/bjarneh (https://www.reddit.com/r/commandline/s/ySIsbxOYex)
  # finds files relative to bib
  chapter_file="${BIBLE_DIR}/${book}${chapter}.md"
  # enter if given book name is an abbreviation
  if [ ! -f "${chapter_file}" ]; then
    get_books_array
    book_from_array=$(echo "$books_array" | jq -r --arg book "$book" 'to_entries[] | select(.value[] == $book) | .key')
    # chop off any number put after any of the single chapter books of the Bible
    if [[ $book_from_array == "obadiah" ]] || [[ $book_from_array == "philemon" ]] || [[ $book_from_array == "2john" ]] || [[ $book_from_array == "3john" ]] || [[ $book_from_array == "jude" ]]; then
      if [[ ! -z "$chapter" ]]; then
        temp=$verse_start
        verse_start=$chapter
        verse_end=$temp
      fi
      chapter=""
    fi
    chapter_file="${BIBLE_DIR}/${book_from_array}${chapter}.md"
    if ! validate_args_book; then
      return 1
    fi
    book=$book_from_array
  fi
  scripture=$(cat "${chapter_file}")

  if [[ -n "${scripture}" ]]; then
    get_terminal_width
    get_hline
    get_title
  fi

  # crop only the specified section of the file
  # this speeds up the program and avoids having to process the entire chapter
  if [[ -n $verse_end ]]; then
    scripture=$(
      if [[ $arg_context == 'true' ]]; then
        echo -e "${scripture}" | awk "/^###### *¶* *$(($verse_start - 2))$/{print; flag=1; next} /^###### *¶* *$(($verse_start - 1))$/{flag=0} flag"
        echo -e "${scripture}" | awk "/^###### *¶* *$(($verse_start - 1))$/{print; flag=1; next} /^###### *¶* *$(($verse_start - 0))$/{flag=0} flag"
        echo -e "${scripture}" | awk "/^###### *¶* *$(($verse_start))$/{print; flag=1; next} /^###### *¶* *$(($verse_end + 1))$/{flag=0} flag"
        echo -e "${scripture}" | awk "/^###### *¶* *$(($verse_end + 1))$/{print; flag=1; next} /^###### *¶* *($(($verse_end + 2))$)/{flag=0} flag"
        echo -e "${scripture}" | awk "/^###### *¶* *$(($verse_end + 2))$/{print; flag=1; next} /^###### *¶* *($(($verse_end + 3))$)/{flag=0} flag"
      elif [[ $arg_context == 'false' ]]; then
        echo -e "${scripture}" | awk "/^###### *¶* *$(($verse_start))$/{print; flag=1; next} /^###### *¶* *$(($verse_end + 1))$/{flag=0} flag"
      fi
    )
  elif [[ -n $verse_start ]]; then
    scripture=$(
      if [[ $arg_context == 'true' ]]; then
        echo -e "${scripture}" | awk "/^###### *¶* *$(($verse_start - 2))$/{print; flag=1; next} /^###### *¶* *$(($verse_start - 1))$/{flag=0} flag"
        echo -e "${scripture}" | awk "/^###### *¶* *$(($verse_start - 1))$/{print; flag=1; next} /^###### *¶* *$(($verse_start - 0))$/{flag=0} flag"
        echo -e "${scripture}" | awk "/^###### *¶* *$(($verse_start))$/{print; flag=1; next} /^###### *¶* *$(($verse_start + 1))$/{flag=0} flag"
        echo -e "${scripture}" | awk "/^###### *¶* *$(($verse_start + 1))$/{print; flag=1; next} /^###### *¶* *($(($verse_start + 2))$)/{flag=0} flag"
        echo -e "${scripture}" | awk "/^###### *¶* *$(($verse_start + 2))$/{print; flag=1; next} /^###### *¶* *($(($verse_start + 3))$)/{flag=0} flag"
      elif [[ $arg_context == 'false' ]]; then
        echo -e "${scripture}" | awk "/^###### *¶* *$(($verse_start))$/{print; flag=1; next} /^###### *¶* *$(($verse_start + 1))$/{flag=0} flag"
      fi
    )
  fi

  # finish processing scripture
  if [[ -n "${scripture}" ]]; then
    cleanup_markdown
    hyphenate_scripture
    cleanup_scripture
    print_scripture
  fi
}

get_books_array() {
  books_array='{
    "genesis": ["gen", "gn", "ge"],
    "exodus": ["ex", "exod", "exo"],
    "leviticus": ["lev", "le", "lv"],
    "numbers": ["num", "nu", "nm", "nb"],
    "deuteronomy": ["deut", "de", "dt"],
    "joshua": ["josh", "jos", "jsh"],
    "judges": ["judg", "jdg", "jg", "jdgs"],
    "ruth": ["rth", "ru"],
    "1samuel": ["1sam", "1sm", "1sa", "1s"],
    "2samuel": ["2sam", "2sm", "2sa", "2s"],
    "1kings": ["1kgs", "1ki", "1kin", "1k"],
    "2kings": ["2kgs", "2ki", "2kin", "2k"],
    "1chronicles": ["1chron", "1chr", "1ch"],
    "2chronicles": ["2chron", "2chr", "2ch"],
    "ezra": ["ezr", "ez"],
    "nehemiah": ["neh", "ne"],
    "esther": ["est", "esth", "es"],
    "job": ["jb"],
    "psalm": ["ps", "pslm", "psa", "psm", "pss"],
    "proverbs": ["prov", "pro", "prv", "pr"],
    "ecclesiastes": ["eccles", "eccle", "ecc", "ec"],
    "song": ["sos", "so"],
    "isaiah": ["isa", "is"],
    "jeremiah": ["jer", "je", "jr"],
    "lamentations": ["lam", "la"],
    "ezekiel": ["ezek", "eze", "ezk"],
    "daniel": ["dan", "da", "dn"],
    "hosea": ["hos", "ho"],
    "joel": ["jl"],
    "amos": ["am"],
    "obadiah": ["obad", "ob"],
    "jonah": ["jon", "jnh", "jon"],
    "micah": ["mic", "mc"],
    "nahum": ["nah", "na"],
    "habakkuk": ["hab", "hb"],
    "zephaniah": ["zeph", "zep", "zp"],
    "haggai": ["hag", "hg"],
    "zechariah": ["zech", "zec", "zc"],
    "malachi": ["mal", "ml"],
    "matthew": ["matt", "mt"],
    "mark": ["mrk", "mk", "mar", "mr"],
    "luke": ["luk", "lk"],
    "john": ["jhn", "jn", "joh"],
    "acts": ["ac", "act"],
    "romans": ["rom", "rm", "ro"],
    "1corinthians": ["1cor", "1co"],
    "2corinthians": ["2cor", "2co"],
    "galatians": ["gal", "ga"],
    "ephesians": ["eph", "ephes"],
    "philippians": ["phil", "php", "pp"],
    "colossians": ["col", "co"],
    "1thessalonians": ["1thess", "1thes", "1th"],
    "2thessalonians": ["2thess", "2thes", "2th"],
    "1timothy": ["1tim", "1ti"],
    "2timothy": ["2tim", "2ti"],
    "titus": ["tit", "ti"],
    "philemon": ["philem", "phm", "pm"],
    "hebrews": ["heb"],
    "james": ["jms", "jas", "jm"],
    "1peter": ["1pet", "1pe", "1pt"],
    "2peter": ["2pet", "2pe", "2pt"],
    "1john": ["1jhn", "1jn", "1joh"],
    "2john": ["2jhn", "2jn", "2joh"],
    "3john": ["3jhn", "3jn", "3joh"],
    "jude": ["jud", "jd"],
    "revelation": ["rev", "re"]
  }'
}

get_terminal_width() {
  width=$(tput cols)
}

get_hline() {
  hline=$(
    printf '=%.0s' $(seq 1 "$width")
    echo
  )
}

get_title() {
  # do not use a : for any of the single chapter books of the Bible
  if [[ ! $book == "obadiah" ]] && [[ ! $book == "philemon" ]] && [[ ! $book == "2john" ]] && [[ ! $book == "3john" ]] && [[ ! $book == "jude" ]]; then
    separator=":"
  else
    separator=" "
  fi

  if [[ $verse_end != '' ]]; then
    title="$(echo "$scripture" | grep '^# .*' | sed 's/# \(.*\) *(*[A-Z]*)*$/\1/')$separator$verse_start-$verse_end"
  elif [[ $verse_start != '' ]]; then
    title="$(echo "$scripture" | grep '^# .*' | sed 's/# \(.*\) *(*[A-Z]*)*$/\1/')$separator$verse_start"
  else
    title="$(echo "$scripture" | grep '^# .*' | sed 's/# \(.*\) *(*[A-Z]*)*$/\1/')"
  fi
}

hyphenate_scripture() {
  longest_line=$(echo "$scripture" | awk 'length > max_length { max_length = length; longest = $0 } END { print longest }')
  longest_line_length=$(echo -n "$longest_line" | wc -c)

  while [[ $longest_line_length -gt $width ]]; do
    if [[ "$REMOVE_ANGLE_BRACKETS" == "false" ]]; then
      hyphenate_scripture_poetry
    fi
    hyphenate_scripture_normal
    longest_line=$(echo "$scripture" | awk 'length > max_length { max_length = length; longest = $0 } END { print longest }') #      not wrap correctly
    longest_line_length_temp=$(echo -n "$longest_line" | wc -c)
    if [[ $longest_line_length -eq $longest_line_length_temp ]]; then
      break
    fi
    longest_line_length=$longest_line_length_temp
  done
}

hyphenate_scripture_poetry() {
  sed_args=(
    # add newline when width is a space
    -e "s/^(.{6}>.{$((width - 9))}) /\1\n      > /"

    # hyphenate words that are in width
    -e "s/^(.{6}>.{$((width - 9))})([A-Za-z0-9])([A-Za-z0-9])([A-Za-z0-9])/\1\2-\n      > \3\4/"

    # move char to newline if width-2 is [[
    -e "s/^(.{6}>.{$((width - 10))})\[\[([A-Za-z0-9])/\1\n      > [[\2/"

    # move char to newline if width-3 is a 2-letter word with ] at end
    -e "s/^(.{6}>.{$((width - 11))}) ([A-Za-z0-9]{2}\])/\1\n      > \2/"

    # move char to newline if width-1 is a space or symbol
    -e "s/^(.{6}>.{$((width - 9))})([ “‘[({])([A-Za-z0-9“‘[({][^ \n])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 9))}) ([A-Za-z0-9“‘[({][^ \n])/\1\n      > \2/"

    # ] or ) not followed by space

    # move char to newline if width is a 3+ letter word + ) or ] + punctuation
    -e "s/^(.{6}>.{$((width - 11))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ \n])/\1-\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 11))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ \n])/\1-\n      > \2\3/"

    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ \n])/\1-\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ \n])/\1-\n      > \2\3/"

    # move char to newline if width is 2 letter word + ) or ] + punctuation
    -e "s/^(.{6}>.{$((width - 11))}) ([A-Za-z0-9]{2}\))([^ \n])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 10))}) ([A-Za-z0-9]{2}\))([^ \n])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 11))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ \n])/\1-\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 11))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ \n])/\1-\n      > \2\3/"

    -e "s/^(.{6}>.{$((width - 11))})(\([A-Za-z0-9]{2}\))([^ \n])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 10))})(\([A-Za-z0-9]{2}\))([^ \n])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 11))})(\[[A-Za-z0-9]{2}\])([^ \n])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 10))})(\[[A-Za-z0-9]{2}\])([^ \n])/\1\n      > \2\3/"

    -e "s/^(.{6}>.{$((width - 11))}) ([A-Za-z0-9]{2}\])([^ \n])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 10))}) ([A-Za-z0-9]{2}\])([^ \n])/\1\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 11))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ \n])/\1-\n      > \2\3/"
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ \n])/\1-\n      > \2\3/"

    # ] or ) followed by space

    # move char to newline if width is a 3+ letter word + ) or ] + punctuation
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      > \2/"

    -e "s/^(.{6}>.{$((width - 9))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      > \2/"

    # move char to newline if width is 2 letter word + ) or ] + punctuation
    -e "s/^(.{6}>.{$((width - 10))}) ([A-Za-z0-9]{2}\))/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}) ([A-Za-z0-9]{2}\))/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      > \2/"

    -e "s/^(.{6}>.{$((width - 10))}) ([A-Za-z0-9]{2}\])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}) ([A-Za-z0-9]{2}\])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      > \2/"

    # move char to newline if width + 1 is punctuation

    -e "s/^(.{6}>.{$((width - 11))}[A-Za-z0-9])([-A-Za-z0-9]{2}[!?.,”’;:–]{2})/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 11))}[A-Za-z0-9])([A-Za-z0-9]{2}[!?.,”’;:–][^”’ \n])/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 10))}-)([A-Za-z0-9]{2}-)/\1\n      > \2/"
    -e "s/^(.{$((width - 3))}-)([A-Za-z0-9]{2}-)/\1\n      \2/"
    -e "s/^(.{6}>.{$((width - 12))}[A-Za-z0-9])([A-Za-z0-9]{2}[”’][A-Za-z][^ \n])/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 12))}[A-Za-z0-9])([A-Za-z0-9]{2}[-!?.,”’;:–]{3})/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 13))}[A-Za-z0-9])([A-Za-z0-9]{2}[-!?.,”’;:–]{4})/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}[!?.,”’;:–])/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 10))}[A-Za-z0-9])([A-Za-z0-9]{2}––)/\1-\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}[A-Za-z0-9])([A-Za-z0-9]{2}[!?.,”’;:–])/\1-\n      > \2/"

    -e "s/^(.{6}>.{$((width - 11))}) ([A-Za-z0-9]{2}[-!?.,”’;:–]{2})/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 11))}) ([A-Za-z0-9]{2}[-!?.,”’;:–][^”’ \n])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 12))}) ([A-Za-z0-9]{2}[”’][A-Za-z])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 12))}) ([A-Za-z0-9]{2}[-!?.,”’;:–]{3})/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 13))}) ([A-Za-z0-9]{2}[-!?.,”’;:–]{4})/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 10))}) ([A-Za-z0-9]{2}[-!?.,”’;:–])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}) ([A-Za-z0-9]{2}[-!?.,”’;:–])/\1\n      > \2/"

    -e "s/^(.{6}>.{$((width - 10))}) ([A-Za-z0-9]{2}[-!?.,”’;:–])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}) ([A-Za-z0-9]{2}[-!?.,”’;:–])/\1\n      > \2/"

    # move char to newline if width-1 is a hyphen
    -e "s/^(.{6}>.{$((width - 9))})-([A-Za-z0-9“‘])/\1-\n      > \2/"

    # move char to newline if width-1 is an em dash
    -e "s/^(.{6}>.{$((width - 10))})––([A-Za-z0-9“‘][^ \n])/\1––\n      > \2/"

    # move char to newline if width is a hyphen
    -e "s/^(.{6}>.{$((width - 9))})([A-Za-z])-([A-Za-z])/\1\2-\n      > \3/"

    # move char to newline if width is an em dash
    -e "s/^(.{6}>.{$((width - 10))})([A-Za-z])––([A-Za-z])/\1\2––\n      > \3/"

    # add newline right after punctuation
    -e "s/^(.{6}>.{$((width - 8))})([!?.,”’;:])/\1\2\n      > /"

    # fix verses that didn't get move to newline
    -e "s/^(.{6}>.{$((width - 7))}) /\1\n      > /"
    -e "s/^(.{6}>.{$((width - 7))})([!?.,”’;:])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 8))}) /\1\n      > /"
    -e "s/> *>/>/"

    # move char if width + 1 is punctuation
    -e "s/^(.{6}>.{$((width - 10))}) ([A-Za-z0-9]{2}[,])/\1\n      > \2/"
    -e "s/^(.{6}>.{$((width - 9))}) ([A-Za-z0-9]{2}[,])/\1\n      > \2/"

    # fix verse number spacing
    -e 's/([0-9]{1})      /\1     /g'
    -e 's/([0-9]{2})     /\1    /g'
    -e 's/([0-9]{3})    /\1   /g'

    # add newline if width+1 is a space
    -e "s/^(.{4}>.{$((width - 5))}) /\1\n      > /"
  )
  scripture=$(echo "$scripture" | sed -E "${sed_args[@]}")
}

hyphenate_scripture_normal() {
  sed_args=(
    # add newline when width is a space
    -e "s/^(.{$((width - 1))}) /\1\n      /"

    # hyphenate words that are in width
    -e "s/^(.{$((width - 2))}[A-Za-z0-9])([A-Za-z0-9][A-Za-z0-9])/\1-\n      \2/"

    # move char to newline if width-2 is [[
    -e "s/^(.{$((width - 3))})\[\[([A-Za-z0-9])/\1\n      [[\2/"

    # move char to newline if width-3 is a 2-letter word with ] at end
    -e "s/^(.{$((width - 4))}) ([A-Za-z0-9]{2}\])/\1\n      \2/"

    # move char to newline if width-1 is a space or symbol
    -e "s/^(.{$((width - 2))})([“‘[({])([A-Za-z0-9“‘[({][^ \n])/\1\n      \2\3/"
    -e "s/^(.{$((width - 2))}) ([A-Za-z0-9“‘[({][^ \n])/\1\n      \2/"

    # ] or ) not followed by space

    # move char to newline if width is a 3+ letter word + ) or ] + punctuation
    -e "s/^(.{$((width - 4))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ \n])/\1-\n      \2\3/"
    -e "s/^(.{$((width - 4))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ \n])/\1-\n      \2\3/"

    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ \n])/\1-\n      \2\3/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ \n])/\1-\n      \2\3/"

    # move char to newline if width is 2 letter word + ) or ] + punctuation
    -e "s/^(.{$((width - 4))}) ([A-Za-z0-9]{2}\))([^ \n])/\1\n      \2\3/"
    -e "s/^(.{$((width - 3))}) ([A-Za-z0-9]{2}\))([^ \n])/\1\n      \2\3/"
    -e "s/^(.{$((width - 4))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ \n])/\1-\n      \2\3/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\))([^ \n])/\1-\n      \2\3/"

    -e "s/^(.{$((width - 4))})(\([A-Za-z0-9]{2}\))([^ \n])/\1\n      \2\3/"
    -e "s/^(.{$((width - 3))})(\([A-Za-z0-9]{2}\))([^ \n])/\1\n      \2\3/"
    -e "s/^(.{$((width - 4))})(\[[A-Za-z0-9]{2}\])([^ \n])/\1\n      \2\3/"
    -e "s/^(.{$((width - 3))})(\[[A-Za-z0-9]{2}\])([^ \n])/\1\n      \2\3/"

    -e "s/^(.{$((width - 4))}) ([A-Za-z0-9]{2}\])([^ \n])/\1\n      \2\3/"
    -e "s/^(.{$((width - 3))}) ([A-Za-z0-9]{2}\])([^ \n])/\1\n      \2\3/"
    -e "s/^(.{$((width - 4))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ \n])/\1-\n      \2\3/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\])([^ \n])/\1-\n      \2\3/"

    # ] or ) followed by space

    # move char to newline if width is a 3+ letter word + ) or ] + punctuation
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      \2/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      \2/"

    -e "s/^(.{$((width - 2))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      \2/"
    -e "s/^(.{$((width - 2))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      \2/"

    # move char to newline if width is 2 letter word + ) or ] + punctuation
    -e "s/^(.{$((width - 3))}) ([A-Za-z0-9]{2}\))/\1\n      \2/"
    -e "s/^(.{$((width - 2))}) ([A-Za-z0-9]{2}\))/\1\n      \2/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      \2/"
    -e "s/^(.{$((width - 2))}[A-Za-z0-9])([A-Za-z0-9]{2}\))/\1-\n      \2/"

    -e "s/^(.{$((width - 3))})(\([A-Za-z0-9]{2}\))/\1\n      \2/"
    -e "s/^(.{$((width - 2))})(\([A-Za-z0-9]{2}\))/\1\n      \2/"
    -e "s/^(.{$((width - 3))})(\[[A-Za-z0-9]{2}\])/\1\n      \2/"
    -e "s/^(.{$((width - 2))})(\[[A-Za-z0-9]{2}\])/\1\n      \2/"

    -e "s/^(.{$((width - 3))}) ([A-Za-z0-9]{2}\])/\1\n      \2/"
    -e "s/^(.{$((width - 2))}) ([A-Za-z0-9]{2}\])/\1\n      \2/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      \2/"
    -e "s/^(.{$((width - 2))}[A-Za-z0-9])([A-Za-z0-9]{2}\])/\1-\n      \2/"

    # move char to newline if width + 1 is punctutation

    -e "s/^(.{$((width - 4))}[A-Za-z0-9])([A-Za-z0-9]{2}[-!?.,”’;:–]{2})/\1-\n      \2/"
    -e "s/^(.{$((width - 4))}[A-Za-z0-9])([A-Za-z0-9]{2}[!?.,”’;:–][^”’ \n])/\1-\n      \2/"
    -e "s/^(.{$((width - 3))}-)([A-Za-z0-9]{2}-)/\1\n      \2/"
    -e "s/^(.{$((width - 5))}[A-Za-z0-9])([A-Za-z0-9]{2}[”’][A-Za-z][^ \n])/\1-\n      \2/"
    -e "s/^(.{$((width - 5))}[A-Za-z0-9])([A-Za-z0-9]{2}[-!?.,”’;:–]{3})/\1-\n      \2/"
    -e "s/^(.{$((width - 6))}[A-Za-z0-9])([A-Za-z0-9]{2}[-!?.,”’;:–]{4})/\1-\n      \2/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}[-!?.,”’;:–])/\1-\n      \2/"
    -e "s/^(.{$((width - 3))}[A-Za-z0-9])([A-Za-z0-9]{2}––)/\1-\n      \2/"
    -e "s/^(.{$((width - 2))}[A-Za-z0-9])([A-Za-z0-9]{2}[-!?.,”’;:–])/\1-\n      \2/"

    -e "s/^(.{$((width - 4))}) ([A-Za-z0-9]{2}[-!?.,”’;:–]{2})/\1\n      \2/"
    -e "s/^(.{$((width - 4))}) ([A-Za-z0-9]{2}[!?.,”’;:–][^”’ \n])/\1\n      \2/"
    -e "s/^(.{$((width - 5))}) ([A-Za-z0-9]{2}[”’][A-Za-z])/\1\n      \2/"
    -e "s/^(.{$((width - 5))}) ([A-Za-z0-9]{2}[-!?.,”’;:–]{3})/\1\n      \2/"
    -e "s/^(.{$((width - 6))}) ([A-Za-z0-9]{2}[-!?.,”’;:–]{4})/\1\n      \2/"
    -e "s/^(.{$((width - 3))}) ([A-Za-z0-9]{2}[-!?.,”’;:–])/\1\n      \2/"
    -e "s/^(.{$((width - 2))}) ([A-Za-z0-9]{2}[-!?.,”’;:–])/\1\n      \2/"

    -e "s/^(.{$((width - 3))}) ([A-Za-z0-9]{2}[-!?.,”’;:–])/\1\n      \2/"
    -e "s/^(.{$((width - 2))}) ([A-Za-z0-9]{2}[-!?.,”’;:–])/\1\n      \2/"

    # move char to newline if width-1 is a hyphen
    -e "s/^(.{$((width - 2))})-([A-Za-z0-9“‘])/\1-\n      \2/"

    # move char to newline if width-1 is an em dash
    -e "s/^(.{$((width - 3))})––([A-Za-z0-9“‘][^ \n])/\1––\n      \2/"

    # move char to newline if width is a hyphen
    -e "s/^(.{$((width - 2))})([A-Za-z])-([A-Za-z])/\1\2-\n      \3/"

    # move char to newline if width is an em dash
    -e "s/^(.{$((width - 3))})([A-Za-z])––([A-Za-z])/\1\2––\n      \3/"
    -e "s/^(.{$((width - 2))})([A-Za-z])––([A-Za-z])/\1\2––\n      \3/"

    # add newline right after punctuation
    # -e "s/^(.{$((width - 1))})([!?.,”’;:])/\1\2\n      /"

    # fix verses that didn't get move to newline
    # -e "s/^(.{$((width))})([!?.,”’;:])/\1\n      \2/"
    # -e "s/^(.{$((width - 1))}) /\1\n      /"

    # fix verse number spacing
    -e 's/([0-9]{1})      /\1     /g'
    -e 's/([0-9]{2})     /\1   /g'
    -e 's/([0-9]{3})   /\1  /g'
  )
  scripture=$(echo "$scripture" | sed -E "${sed_args[@]}")

  # add newline if width+1 is a space
  scripture=$(echo "$scripture" | sed -E "s/^(.{$((width))}) /\1\n      /")
}

hyphenate_abbreviations() {
  sed_args=(
    -e 's/([^ ])    ([^ \n])/\1 \2/g'
    -e 's/([^ ])     ([^ \n])/\1  \2/g'
    -e 's/([^ ])      ([^ \n])/\1   \2/g'
    -e 's/([^ ])       ([^ \n])/\1    \2/g'
    -e 's/([^ ])        ([^ \n])/\1     \2/g'
    -e 's/([^ ])         ([^ \n])/\1      \2/g'
    -e 's/([^ ])          ([^ \n])/\1       \2/g'
    -e 's/([^ ])           ([^ \n])/\1        \2/g'
    -e 's/([^ ])            ([^ \n])/\1         \2/g'
    -e 's/([^ ])             ([^ \n])/\1          \2/g'
    -e 's/([^ ])              ([^ \n])/\1           \2/g'
    -e 's/([^ ])               ([^ \n])/\1            \2/g'
    -e 's/([^ ])                ([^ \n])/\1             \2/g'
    -e 's/([^ ])                 ([^ \n])/\1              \2/g'
    -e 's/([^ ])                  ([^ \n])/\1               \2/g'
    -e 's/^/ /g'
  )

  abbreviations=$(echo "$abbreviations" | sed -E "${sed_args[@]}")
}

cleanup_markdown() {
  if [[ "$REMOVE_SQUARE_BRACKETS" == "true" ]]; then
    scripture=$(echo "$scripture" | sed 's/\[\|\]//g')
  fi

  if [[ "$REMOVE_ANGLE_BRACKETS" == "true" ]]; then
    scripture=$(echo "$scripture" | sed 's/> //g')
  fi

  sed_args=(
    # remove headings
    -e 's/^(# |#### |##### ).*//'

    # fix instances of `] [`
    -e 's/\] \[/ /'

    # format verses
    -e 's/###### (¶* *[0-9][0-9][0-9])/\1   tempnewline/g'
    -e 's/###### (¶* *[0-9][0-9])/\1    tempnewline/g'
    -e 's/###### (¶* *[0-9])/\1     tempnewline/g'
  )
  scripture=$(echo "$scripture" | sed -E "${sed_args[@]}")

  scripture=$(echo "$scripture" | sed -E ':a;$!{N;s/¶ / ~\n/;ba;}')
  scripture=$(echo "$scripture" | sed -E ':a;$!{N;s/\n¶ / ~\n/;ba;}')
  scripture=$(echo "$scripture" | sed -E ':a;$!{N;s/tempnewline\n//;ba;}')

  sed_args=(
    # fix/remove markdown syntax
    -e 's/\\\*/tempasterisk/g'
    -e 's/==//g'
    -e 's/—/––/g'

    # italic -> brackets
    -e 's/\*([A-Za-z0-9])/[\1/g'
    -e 's/([A-Za-z0-9!?.,”’;:])\*/\1]/g'

    # \[ -> [ and \] -> ]
    -e 's/\\\[/[/g'
    -e 's/\\\]/]/g'
    -e 's/\\//g'

    -e 's/^> /      > /g'
    -e 's/tempasterisk/*/g'

    # add space before lines that are not on the same line as the verse num
    -e 's/(^[^0-9# ])/      \1/g'
  )
  scripture=$(echo "$scripture" | sed -E "${sed_args[@]}")
}

cleanup_scripture() {
  sed_args=(
    # fix spacing
    -e 's/^ {2,4}([^ ])/      \1/g'
    -e 's/^ {6,}([^ ])/      \1/g'

    # remove unnecessary character
    -e "s/^(.{$((width - 1))})––/\1–/g"

    # change ~ back to pilcrow signs
    -e 's/~/¶/g'
  )
  scripture=$(echo "$scripture" | sed -E "${sed_args[@]}")

  scripture=$(echo "$scripture" | sed -E ':a;$!{N;s/\n *¶ */ ¶/;ba;}')
  scripture=$(echo "$scripture" | sed -E "s/^(.{$((width))})¶/\1\n     ¶/g")
  scripture=$(echo "$scripture" | sed -E ':a;$!{N;s/ ¶\n([0-9])    /\n\1   ↓/;ba;}')
  scripture=$(echo "$scripture" | sed -E ':a;$!{N;s/ ¶\n([0-9][0-9])   /\n\1  ↓/;ba;}')
  scripture=$(echo "$scripture" | sed -E ':a;$!{N;s/ ¶\n([0-9][0-9][0-9])  /\n\1 ↓/;ba;}')

  sed_args=(
    # remove blank lines
    -e 's/ *$//g'
    -e '/^$/d'
    -e '/^ *>* *$/d'

    # reformat verse nums to be right-aligned
    -e 's/^([0-9]{2}) / \1/g'
    -e 's/^([0-9]{1})  /  \1/g'

    # fix verses in hundreds
    -e 's/^([0-9]{3}) *↓ */\1 ↓ /g'
    -e 's/^([0-9]{3})   */\1   /g'

    # fix ↓ with no space before >
    -e "s/↓>/↓ >/"
  )
  scripture=$(echo "$scripture" | sed -E "${sed_args[@]}")

  scripture=$(echo "$scripture" | sed -E "s/↓/$PARAGRAPH_MARKER/")
  # fi
}

cleanup_chapter() {
  sed_args=(
    -e 's/(^[^0-9 ])/      \1/g'
    -e '1s/^      ## (.*)/      [\1]/g'
    -e 's/^      ## (.*)/\n      [\1]/g'
  )
  scripture=$(echo "$scripture" | sed -E "${sed_args[@]}")
}

cleanup_section() {
  sed_args=(
    # format editorial headings
    -e 's/^ *## (.*)//'
    -e '/^$/d'
  )
  scripture=$(echo "$scripture" | sed -E "${sed_args[@]}")
}

cleanup_verse() {
  cleanup_section
}

print_scripture() {
  if [[ $verse_end != '' ]]; then
    print_section
  elif [[ $verse_start != '' ]]; then
    print_verse
  else
    print_chapter
  fi
}

print_chapter() {
  cleanup_chapter
  output="$(
    echo "$hline"
    padding=$(((width + ${#title}) / 2))
    printf "%*s\n" $padding "$title"
    echo "$hline"
    echo -e "$scripture"
  )"
  echo "$output" | $PAGER
}

print_section() {
  cleanup_section
  output="$(
    sed_args=(
      # format editorial headings
      -e 's/^ *## (.*)//'
      -e '/^$/d'
    )
    scripture=$(echo "$scripture" | sed -E "${sed_args[@]}")
    echo "$hline"
    padding=$(((width + ${#title}) / 2))
    printf "%*s\n" $padding "$title"
    echo "$hline"
    if [[ $arg_context == 'true' ]]; then
      echo -e "${scripture}" | awk "/^ *$(($verse_start - 2)) /{print; flag=1; next} /^ *$(($verse_start - 1)) /{flag=0} flag"
      echo -e "${scripture}" | awk "/^ *$(($verse_start - 1)) /{print; flag=1; next} /^ *$(($verse_start - 0)) /{flag=0} flag"
      echo -e "$(echo -e "${scripture}" | awk "/^ *$(($verse_start)) /{print \"\033[31m\" \$0; flag=1; next} /^ *$(($verse_end + 1)) /{flag=0} flag {print \"\033[31m\" \$0}")\033[0m"
      echo -e "${scripture}" | awk "/^ *$(($verse_end + 1)) /{print; flag=1; next} /^ *($(($verse_end + 2)) )/{flag=0} flag"
      echo -e "${scripture}" | awk "/^ *$(($verse_end + 2)) /{print; flag=1; next} /^ *($(($verse_end + 3)) )/{flag=0} flag"
    elif [[ $arg_context == 'false' ]]; then
      echo -e "${scripture}" | awk "/^ *$(($verse_start)) /{print \"\033[31m\" \$0; flag=1; next} /^ *$(($verse_end + 1)) /{flag=0} flag {print \"\033[31m\" \$0}"
    fi
  )"
  echo "$output" | $PAGER
  if [[ "$PAGER" == "cat" ]]; then
    echo -en "\033[0m"
  fi
}

print_verse() {
  cleanup_verse
  output="$(
    echo "$hline"
    padding=$(((width + ${#title}) / 2))
    printf "%*s\n" $padding "$title"
    echo "$hline"
    if [[ $arg_context == 'true' ]]; then
      echo -e "${scripture}" | awk "/^ *$(($verse_start - 2)) /{print; flag=1; next} /^ *$(($verse_start - 1)) /{flag=0} flag"
      echo -e "${scripture}" | awk "/^ *$(($verse_start - 1)) /{print; flag=1; next} /^ *$(($verse_start - 0)) /{flag=0} flag"
      echo -e "$(echo -e "${scripture}" | awk "/^ *$(($verse_start)) /{print \"\033[31m\" \$0; flag=1; next} /^ *$(($verse_start + 1)) /{flag=0} flag {print \"\033[31m\" \$0}")\033[0m"
      echo -e "${scripture}" | awk "/^ *$(($verse_start + 1)) /{print; flag=1; next} /^ *($(($verse_start + 2)) )/{flag=0} flag"
      echo -e "${scripture}" | awk "/^ *$(($verse_start + 2)) /{print; flag=1; next} /^ *($(($verse_start + 3)) )/{flag=0} flag"
    elif [[ $arg_context == 'false' ]]; then
      echo -e "${scripture}" | awk "/^ *$(($verse_start)) /{print \"\033[31m\" \$0; flag=1; next} /^ *$(($verse_start + 1)) /{flag=0} flag {print \"\033[31m\" \$0}"
    fi
  )"
  echo "$output" | $PAGER
  if [[ "$PAGER" == "cat" ]]; then
    echo -en "\033[0m"
  fi
}

show_help() {
  echo "Usage: bib [-h|-a|-c|-n]"
  echo "  -h  --help           Display help"
  echo "  -a  --abbreviations  Display list of abbreviations"
  echo "  -c  --context        Show context verses"
  echo "  -n  --no-context     Hide context verses"
  echo "Usage: (interactive mode only)"
  echo "  clear/cls/l          Clear terminal screen"
}

show_abbreviations() {
  get_books_array
  get_terminal_width
  get_hline

  abbreviations="$(
    echo "$books_array" | jq -r 'to_entries | .[] | "\(.key) | \(.value | join(", "))"' | column -t -s '|'
  )"

  hyphenate_abbreviations

  output="$(
    echo "$hline"
    title="Book Abbreviations"
    padding=$(((width + ${#title}) / 2))
    printf "%*s\n" $padding "$title"
    echo "$hline"

    notice1="|  1 2 or 3 can also be  |"
    notice2="|  replaced with any of  |"
    notice3="|   first second third   |"
    notice4="|      1st 2nd 3rd       |"
    notice5="|        i ii iii        |"

    echo
    padding=$(((width + ${#notice1}) / 2))
    printf "%*s\n" $padding "$notice1"
    padding=$(((width + ${#notice2}) / 2))
    printf "%*s\n" $padding "$notice2"
    padding=$(((width + ${#notice3}) / 2))
    printf "%*s\n" $padding "$notice3"
    padding=$(((width + ${#notice4}) / 2))
    printf "%*s\n" $padding "$notice4"
    padding=$(((width + ${#notice5}) / 2))
    printf "%*s\n" $padding "$notice5"
    echo

    echo -e "${abbreviations}"
  )"

  echo "$output" | $PAGER
}

validate_args_verses() {
  if [[ -n "$verse_end" ]]; then
    if [[ "$verse_start" -eq "$verse_end" ]]; then
      echo -e "<!> bib: verse numbers cannot be the same"
      reset_all_variables "$@"
    elif [[ "$verse_start" -gt "$verse_end" ]]; then
      echo -e "<!> bib: starting verse cannot be greater than ending verse"
      reset_all_variables "$@"
    fi
  fi
}

validate_args_book() {
  if [ -z "${book_from_array}" ] && [ -z "${book}" ]; then
    echo -e "<!> bib: book not found"
    return 1
  elif [ ! -f "${chapter_file}" ]; then
    if [ -z "${chapter}" ]; then
      echo -e "<!> bib: please enter a chapter number"
      return 1
    fi
    echo -e "<!> bib: book/chapter not found"
    return 1
  fi
}

# used to break out of loop when traversing arguments
reset_all_variables() {
  set --
  reset_flags
  reset_text
}

reset_flags() {
  if [[ "$CONTEXT_DEFAULT" == "true" ]]; then
    arg_context="true"
    arg_context_all="true"
  elif [[ "$CONTEXT_DEFAULT" == "false" ]]; then
    arg_context="false"
    arg_context_all="false"
  fi
  flags_found=0
}

reset_text() {
  book=""
  book_from_array=""
  chapter=""
  verse_start=""
  verse_end=""
  hline=""
  title=""
  separator=""
  scripture=""
}

main "$@"
